/*
 * STGLauncherView.java
 */

package stglauncher;

import com.sun.org.apache.xml.internal.serialize.OutputFormat;
import com.sun.org.apache.xml.internal.serialize.XMLSerializer;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;

import java.net.*;
import java.io.*;
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

/**
 * The application's main frame.
 */
public class STGLauncherView extends FrameView {
    
    int stage_download_steps=6;
    int char_download_steps=5;
    
    boolean is_game_downloaded=false;
    
    ArrayList<String>downloaded_stages = new ArrayList<String>();
    ArrayList<String>available_stages = new ArrayList<String>();
    
    ArrayList<String>downloaded_chars = new ArrayList<String>();
    ArrayList<String>available_chars = new ArrayList<String>();

    String operating_system="Linux64";
    //String operating_system="Linux32";
    //String operating_system="Windows";
    
    public STGLauncherView(SingleFrameApplication app) {
        super(app);

        String frame_title = "Rosalila STG Launcher";
        JFrame main_frame = new JFrame(frame_title);        
        this.setFrame(main_frame);
        
        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                //statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                //statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");

        
        btn_delete_stage.setEnabled(false);
        btn_update_stage.setEnabled(false);
        btn_download_stage.setEnabled(false);
        
        createDir("stage_previews");

        File config_test = new File("config.xml");
        if(config_test.exists())
        {
            is_game_downloaded=true;
        }
        
        if(!is_game_downloaded)
        {
            btn_start.setEnabled(false);
            btn_patch.setText("Download game");
            list_stages.setEnabled(false);
        }
        
        new Thread()
        {
            public void run()
            {
                serverInitializations();
            }
        }.start();
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = STGLauncherApp.getApplication().getMainFrame();
            aboutBox = new STGLauncherAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        STGLauncherApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        panel_stages = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        list_stages = new javax.swing.JList();
        ip_stage_preview = new ImagePanel();
        btn_download_stage = new javax.swing.JButton();
        btn_update_stage = new javax.swing.JButton();
        btn_delete_stage = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        panel_top = new javax.swing.JPanel();
        btn_start = new javax.swing.JButton();
        btn_patch = new javax.swing.JButton();
        pbar_download = new javax.swing.JProgressBar();
        txt_notice = new javax.swing.JLabel();
        ip_top_banner = new ImagePanel();
        txt_info = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();

        mainPanel.setName("mainPanel"); // NOI18N

        panel_stages.setName("panel_stages"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        list_stages.setName("list_stages"); // NOI18N
        list_stages.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                list_stagesMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(list_stages);

        ip_stage_preview.setName("ip_stage_preview"); // NOI18N

        javax.swing.GroupLayout ip_stage_previewLayout = new javax.swing.GroupLayout(ip_stage_preview);
        ip_stage_preview.setLayout(ip_stage_previewLayout);
        ip_stage_previewLayout.setHorizontalGroup(
            ip_stage_previewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 435, Short.MAX_VALUE)
        );
        ip_stage_previewLayout.setVerticalGroup(
            ip_stage_previewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 410, Short.MAX_VALUE)
        );

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(stglauncher.STGLauncherApp.class).getContext().getResourceMap(STGLauncherView.class);
        btn_download_stage.setText(resourceMap.getString("btn_download_stage.text")); // NOI18N
        btn_download_stage.setName("btn_download_stage"); // NOI18N
        btn_download_stage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btn_download_stageMousePressed(evt);
            }
        });

        btn_update_stage.setText(resourceMap.getString("btn_update_stage.text")); // NOI18N
        btn_update_stage.setName("btn_update_stage"); // NOI18N
        btn_update_stage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btn_update_stageMousePressed(evt);
            }
        });

        btn_delete_stage.setText(resourceMap.getString("btn_delete_stage.text")); // NOI18N
        btn_delete_stage.setName("btn_delete_stage"); // NOI18N
        btn_delete_stage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btn_delete_stageMousePressed(evt);
            }
        });

        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        javax.swing.GroupLayout panel_stagesLayout = new javax.swing.GroupLayout(panel_stages);
        panel_stages.setLayout(panel_stagesLayout);
        panel_stagesLayout.setHorizontalGroup(
            panel_stagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_stagesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_stagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(panel_stagesLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel_stagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panel_stagesLayout.createSequentialGroup()
                                .addComponent(btn_download_stage)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_update_stage)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_delete_stage))
                            .addComponent(ip_stage_preview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(82, Short.MAX_VALUE))
        );
        panel_stagesLayout.setVerticalGroup(
            panel_stagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_stagesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_stagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
                    .addGroup(panel_stagesLayout.createSequentialGroup()
                        .addGroup(panel_stagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_download_stage)
                            .addComponent(btn_update_stage)
                            .addComponent(btn_delete_stage))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ip_stage_preview, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        panel_top.setName("panel_top"); // NOI18N

        btn_start.setText(resourceMap.getString("btn_start.text")); // NOI18N
        btn_start.setName("btn_start"); // NOI18N
        btn_start.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btn_startMousePressed(evt);
            }
        });

        btn_patch.setText(resourceMap.getString("btn_patch.text")); // NOI18N
        btn_patch.setMaximumSize(new java.awt.Dimension(75, 25));
        btn_patch.setMinimumSize(new java.awt.Dimension(75, 25));
        btn_patch.setName("btn_patch"); // NOI18N
        btn_patch.setPreferredSize(new java.awt.Dimension(75, 25));
        btn_patch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btn_patchMousePressed(evt);
            }
        });

        pbar_download.setName("pbar_download"); // NOI18N

        txt_notice.setText(resourceMap.getString("txt_notice.text")); // NOI18N
        txt_notice.setName("txt_notice"); // NOI18N

        ip_top_banner.setName("ip_top_banner"); // NOI18N

        javax.swing.GroupLayout ip_top_bannerLayout = new javax.swing.GroupLayout(ip_top_banner);
        ip_top_banner.setLayout(ip_top_bannerLayout);
        ip_top_bannerLayout.setHorizontalGroup(
            ip_top_bannerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );
        ip_top_bannerLayout.setVerticalGroup(
            ip_top_bannerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );

        txt_info.setText(resourceMap.getString("txt_info.text")); // NOI18N
        txt_info.setName("txt_info"); // NOI18N

        javax.swing.GroupLayout panel_topLayout = new javax.swing.GroupLayout(panel_top);
        panel_top.setLayout(panel_topLayout);
        panel_topLayout.setHorizontalGroup(
            panel_topLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_topLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_topLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ip_top_banner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txt_info)
                    .addGroup(panel_topLayout.createSequentialGroup()
                        .addComponent(btn_start, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_patch, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txt_notice)
                    .addComponent(pbar_download, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel_topLayout.setVerticalGroup(
            panel_topLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_topLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ip_top_banner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txt_notice)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_topLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_start, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_patch, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_info)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pbar_download, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panel_stages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panel_top, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel_top, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel_stages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(stglauncher.STGLauncherApp.class).getContext().getActionMap(STGLauncherView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setComponent(mainPanel);
        setMenuBar(menuBar);
    }// </editor-fold>//GEN-END:initComponents

void serverInitializations()
{
    getFile("launcher.xml");
    
    if(is_game_downloaded)
    {
        getDownloadedStages();
    }
    getAvailableStages();
    
    if(is_game_downloaded)
    {
        getDownloadedChars();
    }
    getAvailableChars();

    getFile("banner_launcher.png");
    ((ImagePanel)ip_top_banner).setImage("banner_launcher.png");
    
    printNotice();
}

void getAvailableStages()
{
    try
    {
        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
        Document launcher_doc = docBuilder.parse (new File("launcher.xml"));
        launcher_doc.getDocumentElement ().normalize ();

        NodeList stage_node_list = launcher_doc.getElementsByTagName("stage");
        DefaultListModel model = new DefaultListModel();
        for(int s=0; s<stage_node_list.getLength() ; s++)
        {
            String stage_name = ((Element)stage_node_list.item(s)).getAttribute("name");
            available_stages.add(stage_name);
            getFile("stage_previews/"+stage_name+".png");
            model.add(s, stage_name);
        }
        list_stages.setModel(model);
    }catch (SAXParseException err)
    {
        System.out.println ("** Parsing error" + ", line " 
             + err.getLineNumber () + ", uri " + err.getSystemId ());
        System.out.println(" " + err.getMessage ());

    }catch (SAXException e)
    {
        Exception x = e.getException ();
        ((x == null) ? e : x).printStackTrace ();
    }catch (Throwable t)
    {
        t.printStackTrace ();
    }
}

void getDownloadedStages()
{
    try
    {
        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
        Document launcher_doc = docBuilder.parse (new File("config.xml"));
        launcher_doc.getDocumentElement ().normalize ();

        NodeList stage_node_list = launcher_doc.getElementsByTagName("stage");
        for(int s=0; s<stage_node_list.getLength() ; s++)
        {
            String stage_name = ((Element)stage_node_list.item(s)).getAttribute("name");
            addStage(stage_name);
        }
    }catch (SAXParseException err)
    {
        System.out.println ("** Parsing error" + ", line " 
             + err.getLineNumber () + ", uri " + err.getSystemId ());
        System.out.println(" " + err.getMessage ());

    }catch (SAXException e)
    {
        Exception x = e.getException ();
        ((x == null) ? e : x).printStackTrace ();
    }catch (Throwable t)
    {
        t.printStackTrace ();
    }
}

void getAvailableChars()
{
    try
    {
        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
        Document launcher_doc = docBuilder.parse (new File("launcher.xml"));
        launcher_doc.getDocumentElement ().normalize ();

        NodeList char_node_list = launcher_doc.getElementsByTagName("char");
        for(int s=0; s<char_node_list.getLength() ; s++)
        {
            String char_name = ((Element)char_node_list.item(s)).getAttribute("name");
            available_chars.add(char_name);
        }
    }catch (SAXParseException err)
    {
        System.out.println ("** Parsing error" + ", line " 
             + err.getLineNumber () + ", uri " + err.getSystemId ());
        System.out.println(" " + err.getMessage ());

    }catch (SAXException e)
    {
        Exception x = e.getException ();
        ((x == null) ? e : x).printStackTrace ();
    }catch (Throwable t)
    {
        t.printStackTrace ();
    }
}

void getDownloadedChars()
{
    try
    {
        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
        Document launcher_doc = docBuilder.parse (new File("config.xml"));
        launcher_doc.getDocumentElement ().normalize ();

        NodeList char_node_list = launcher_doc.getElementsByTagName("char");
        for(int s=0; s<char_node_list.getLength() ; s++)
        {
            String char_name = ((Element)char_node_list.item(s)).getAttribute("name");
            addChar(char_name);
        }
    }catch (SAXParseException err)
    {
        System.out.println ("** Parsing error" + ", line " 
             + err.getLineNumber () + ", uri " + err.getSystemId ());
        System.out.println(" " + err.getMessage ());

    }catch (SAXException e)
    {
        Exception x = e.getException ();
        ((x == null) ? e : x).printStackTrace ();
    }catch (Throwable t)
    {
        t.printStackTrace ();
    }
}
    
void printNotice()
{
    try {
        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
        Document main_doc = docBuilder.parse (new File("launcher.xml"));
        main_doc.getDocumentElement ().normalize ();

        NodeList listOfMoves_main_file = main_doc.getElementsByTagName("Notice");

        for(int s=0; s<listOfMoves_main_file.getLength() ; s++)
        {
            this.txt_notice.setText(((Element)listOfMoves_main_file.item(s)).getTextContent());
            txt_info.updateUI();
        }
    }catch (SAXParseException err) {
        System.out.println ("** Parsing error" + ", line " 
             + err.getLineNumber () + ", uri " + err.getSystemId ());
        System.out.println(" " + err.getMessage ());

    }catch (SAXException e) {
        Exception x = e.getException ();
        ((x == null) ? e : x).printStackTrace ();
    }catch (Throwable t) {
        t.printStackTrace ();
    }
}
    
private void btn_startMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_startMousePressed
    try
    {
        if(operating_system.compareTo("Linux64")==0)
        {
            Runtime.getRuntime().exec("chmod +x STG64");
            Runtime.getRuntime().exec("./STG64");
        }
        else if (operating_system.compareTo("Linux32")==0)
        {
            Runtime.getRuntime().exec("chmod +x STG32");
            Runtime.getRuntime().exec("./STG32");
        }
        else if(operating_system.compareTo("Windows")==0)
        {
            Runtime.getRuntime().exec("./STG");
        }
    }catch(Exception e)
    {
        e.printStackTrace();
    }
}//GEN-LAST:event_btn_startMousePressed

void getFile(String file_path)
{
    txt_info.setText("Downloading "+file_path);
    txt_info.updateUI();
    try {
        URL website = new URL("http://stg.rosalilastudio.com/game/"+file_path);
        ReadableByteChannel rbc = Channels.newChannel(website.openStream());
        
        FileOutputStream fos = new FileOutputStream(file_path,false);
        fos.getChannel().transferFrom(rbc, 0, 1 << 24);
        fos.close();
    } catch (MalformedURLException ex) {
        Logger.getLogger(STGLauncherView.class.getName()).log(Level.SEVERE, null, ex);
    } catch(IOException ex)
    {
        Logger.getLogger(STGLauncherView.class.getName()).log(Level.SEVERE, null, ex);
    }
}

void createDir(String path)
{
    File dir = new File(path);
    dir.mkdir();
}

void downloadCharsPngs(String name)
{
    try {
        
        //From main.xml
        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
        Document main_doc = docBuilder.parse (new File("chars/"+name+"/main.xml"));
        main_doc.getDocumentElement ().normalize ();

        NodeList listOfMoves_main_file = main_doc.getElementsByTagName("Sprite");

        for(int s=0; s<listOfMoves_main_file.getLength() ; s++)
        {
            String path = ((Element)listOfMoves_main_file.item(s)).getAttribute("path");
            
            //Create directory if necessary
            String search_directory="";
            for(int i=0;i<path.length();i++)
            {
                if(path.charAt(i)!='/')
                    search_directory+=path.charAt(i);
                else
                {
                    createDir("chars/"+name+"/sprites/"+search_directory);
                    search_directory+=path.charAt(i);
                }
            }
            
            //All set up to get file
            getFile("chars/"+name+"/sprites/"+path);
        }
        
        
        //From bullets.xml
        Document bullets_doc = docBuilder.parse (new File("chars/"+name+"/bullets.xml"));
        bullets_doc.getDocumentElement ().normalize ();

        NodeList listOfSprites_bullets_file = bullets_doc.getElementsByTagName("Sprite");

        for(int s=0; s<listOfSprites_bullets_file.getLength() ; s++)
        {
            String path = ((Element)listOfSprites_bullets_file.item(s)).getAttribute("path");
            
            //Create directory if necessary
            String search_directory="";
            for(int i=0;i<path.length();i++)
            {
                if(path.charAt(i)!='/')
                    search_directory+=path.charAt(i);
                else
                {
                    createDir("chars/"+name+"/sprites/"+search_directory);
                    search_directory+=path.charAt(i);
                }
            }
            
            //All set up to get file
            getFile("chars/"+name+"/sprites/"+path);
        }

        
    }catch (SAXParseException err) {
        System.out.println ("** Parsing error" + ", line " 
             + err.getLineNumber () + ", uri " + err.getSystemId ());
        System.out.println(" " + err.getMessage ());

    }catch (SAXException e) {
        Exception x = e.getException ();
        ((x == null) ? e : x).printStackTrace ();
    }catch (Throwable t) {
        t.printStackTrace ();
    }
}

void downloadEnemyPngs(String name)
{
    try {
        
        //From main.xml
        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
        Document main_doc = docBuilder.parse (new File("stages/"+name+"/Enemy/main.xml"));
        main_doc.getDocumentElement ().normalize ();

        NodeList listOfMoves_main_file = main_doc.getElementsByTagName("Sprite");

        for(int s=0; s<listOfMoves_main_file.getLength() ; s++)
        {
            String path = ((Element)listOfMoves_main_file.item(s)).getAttribute("path");
            
            //Create directory if necessary
            String search_directory="";
            for(int i=0;i<path.length();i++)
            {
                if(path.charAt(i)!='/')
                    search_directory+=path.charAt(i);
                else
                {
                    createDir("stages/"+name+"/Enemy/sprites/"+search_directory);
                    search_directory+=path.charAt(i);
                }
            }
            
            //All set up to get file
            getFile("stages/"+name+"/Enemy/sprites/"+path);
        }
        
        
        //From bullets.xml
        Document bullets_doc = docBuilder.parse (new File("stages/"+name+"/Enemy/bullets.xml"));
        bullets_doc.getDocumentElement ().normalize ();

        NodeList listOfSprites_bullets_file = bullets_doc.getElementsByTagName("Sprite");

        for(int s=0; s<listOfSprites_bullets_file.getLength() ; s++)
        {
            String path = ((Element)listOfSprites_bullets_file.item(s)).getAttribute("path");
            
            //Create directory if necessary
            String search_directory="";
            for(int i=0;i<path.length();i++)
            {
                if(path.charAt(i)!='/')
                    search_directory+=path.charAt(i);
                else
                {
                    createDir("stages/"+name+"/Enemy/sprites/"+search_directory);
                    search_directory+=path.charAt(i);
                }
            }
            
            //All set up to get file
            getFile("stages/"+name+"/Enemy/sprites/"+path);
        }

        
    }catch (SAXParseException err) {
        System.out.println ("** Parsing error" + ", line " 
             + err.getLineNumber () + ", uri " + err.getSystemId ());
        System.out.println(" " + err.getMessage ());

    }catch (SAXException e) {
        Exception x = e.getException ();
        ((x == null) ? e : x).printStackTrace ();
    }catch (Throwable t) {
        t.printStackTrace ();
    }
}

void downloadStagePngs(String name)
{
    try {
        
        //From main.xml
        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
        Document main_doc = docBuilder.parse (new File("stages/"+name+"/main.xml"));
        main_doc.getDocumentElement ().normalize ();

        NodeList listOfMoves_main_file = main_doc.getElementsByTagName("frame");

        for(int s=0; s<listOfMoves_main_file.getLength() ; s++)
        {
            String path = ((Element)listOfMoves_main_file.item(s)).getAttribute("image_path");
            
            //Create directory if necessary
            String search_directory="";
            for(int i=0;i<path.length();i++)
            {
                if(path.charAt(i)!='/')
                    search_directory+=path.charAt(i);
                else
                {
                    createDir("stages/"+name+"/images/"+search_directory);
                    search_directory+=path.charAt(i);
                }
            }
            
            //All set up to get file
            getFile("stages/"+name+"/images/"+path);
        }
        
    }catch (SAXParseException err) {
        System.out.println ("** Parsing error" + ", line " 
             + err.getLineNumber () + ", uri " + err.getSystemId ());
        System.out.println(" " + err.getMessage ());

    }catch (SAXException e) {
        Exception x = e.getException ();
        ((x == null) ? e : x).printStackTrace ();
    }catch (Throwable t) {
        t.printStackTrace ();
    }
}

void downloadChar(String name)
{
    createDir("chars/"+name);
    createDir("chars/"+name+"/sounds");
    createDir("chars/"+name+"/sprites");
    
    this.pbar_download.setValue(this.pbar_download.getValue()+1);
    
    getFile("chars/"+name+"/bullets.xml");
    getFile("chars/"+name+"/life_bar.png");
    getFile("chars/"+name+"/main.xml");
    getFile("chars/"+name+"/patterns.xml");
    getFile("chars/"+name+"/portrait.png");
    getFile("chars/"+name+"/preview.png");
    
    this.pbar_download.setValue(this.pbar_download.getValue()+1);
    
    downloadCharsPngs(name);
    
    this.pbar_download.setValue(this.pbar_download.getValue()+1);
    
    downloadCharOggs(name);
    
    this.pbar_download.setValue(this.pbar_download.getValue()+1);
    
    addChar(name);
    
    this.pbar_download.setValue(this.pbar_download.getValue()+1);
    
    txt_info.setText("Character download finished!");
}

void addChar(String name)
{
    if(!downloaded_chars.contains(name))
        downloaded_chars.add(name);
    
    try {

        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();

        Document config_doc = docBuilder.parse (new File("config.xml"));

        config_doc.getDocumentElement ().normalize ();

        NodeList config_chars = config_doc.getElementsByTagName("Chars");
        
        //Chars exists in config?
        NodeList char_nodelist = config_doc.getElementsByTagName("char");
        for(int i=0;i<char_nodelist.getLength();i++)
        {
            if(((Element)char_nodelist.item(i)).getAttribute("name").equals(name))
            {
                return;
            }
        }
        
        Element new_char = config_doc.createElement("char");
        new_char.setAttribute("name", ""+name);
        config_chars.item(0).appendChild(new_char);

        //Save XML file
        OutputFormat format = new OutputFormat(config_doc);
        format.setIndenting(true);
        XMLSerializer serializer;
        serializer = new XMLSerializer(new FileOutputStream(new File("config.xml")), format);
        serializer.serialize(config_doc);

    }catch (SAXParseException err) {
        System.out.println ("** Parsing error" + ", line " 
             + err.getLineNumber () + ", uri " + err.getSystemId ());
        System.out.println(" " + err.getMessage ());

    }catch (SAXException e) {
        Exception x = e.getException ();
        ((x == null) ? e : x).printStackTrace ();
    }catch (Throwable t) {
        t.printStackTrace ();
    }
}

void downloadCharOggs(String name)
{
    try {
        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
        Document bullets_doc = docBuilder.parse (new File("chars/"+name+"/bullets.xml"));
        bullets_doc.getDocumentElement ().normalize ();

        NodeList listOfSprites_bullets_file = bullets_doc.getElementsByTagName("Bullet");

        for(int s=0; s<listOfSprites_bullets_file.getLength() ; s++)
        {
            String path = ((Element)listOfSprites_bullets_file.item(s)).getAttribute("sound");
            
            if(path!=null && path.compareTo("")!=0)
            {
                //Create directory if necessary
                String search_directory="";
                for(int i=0;i<path.length();i++)
                {
                    if(path.charAt(i)!='/')
                        search_directory+=path.charAt(i);
                    else
                    {
                        createDir("chars/"+name+"/sounds/"+search_directory);
                        search_directory+=path.charAt(i);
                    }
                }

                //All set up to get file
                getFile("chars/"+name+"/sounds/"+path);
            }
        }

        
    }catch (SAXParseException err) {
        System.out.println ("** Parsing error" + ", line " 
             + err.getLineNumber () + ", uri " + err.getSystemId ());
        System.out.println(" " + err.getMessage ());

    }catch (SAXException e) {
        Exception x = e.getException ();
        ((x == null) ? e : x).printStackTrace ();
    }catch (Throwable t) {
        t.printStackTrace ();
    }
}

void downloadEnemyOggs(String name)
{
    try {
        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
        Document bullets_doc = docBuilder.parse (new File("stages/"+name+"/Enemy/bullets.xml"));
        bullets_doc.getDocumentElement ().normalize ();

        NodeList listOfSprites_bullets_file = bullets_doc.getElementsByTagName("Bullet");

        for(int s=0; s<listOfSprites_bullets_file.getLength() ; s++)
        {
            String path = ((Element)listOfSprites_bullets_file.item(s)).getAttribute("sound");
            
            if(path!=null && path.compareTo("")!=0)
            {
                //Create directory if necessary
                String search_directory="";
                for(int i=0;i<path.length();i++)
                {
                    if(path.charAt(i)!='/')
                        search_directory+=path.charAt(i);
                    else
                    {
                        createDir("stages/"+name+"/Enemy/sounds/"+search_directory);
                        search_directory+=path.charAt(i);
                    }
                }

                //All set up to get file
                getFile("stages/"+name+"/Enemy/sounds/"+path);
            }
        }

        
    }catch (SAXParseException err) {
        System.out.println ("** Parsing error" + ", line " 
             + err.getLineNumber () + ", uri " + err.getSystemId ());
        System.out.println(" " + err.getMessage ());

    }catch (SAXException e) {
        Exception x = e.getException ();
        ((x == null) ? e : x).printStackTrace ();
    }catch (Throwable t) {
        t.printStackTrace ();
    }
}

void downloadStage(String name)
{
    createDir("stages/"+name);
    createDir("stages/"+name+"/images");
    createDir("stages/"+name+"/Enemy");
    createDir("stages/"+name+"/Enemy/sounds");
    createDir("stages/"+name+"/Enemy/sprites");
    
    this.pbar_download.setValue(this.pbar_download.getValue()+1);
    
    getFile("stages/"+name+"/main.xml");
    getFile("stages/"+name+"/music.ogg");
    
    getFile("stages/"+name+"/Enemy/bullets.xml");
    getFile("stages/"+name+"/Enemy/life_bar.png");
    getFile("stages/"+name+"/Enemy/main.xml");
    getFile("stages/"+name+"/Enemy/modifiers.xml");
    getFile("stages/"+name+"/Enemy/patterns.xml");
    getFile("stages/"+name+"/images/preview.png");
    
    
    this.pbar_download.setValue(this.pbar_download.getValue()+1);
    
    downloadEnemyPngs(name);
    
    this.pbar_download.setValue(this.pbar_download.getValue()+1);
    
    downloadEnemyOggs(name);
    
    this.pbar_download.setValue(this.pbar_download.getValue()+1);
    
    downloadStagePngs(name);
    
    this.pbar_download.setValue(this.pbar_download.getValue()+1);
    
    addStage(name);
    
    this.pbar_download.setValue(this.pbar_download.getValue()+1);
    
    txt_info.setText("Stage download finished!");
}

void addStage(String name)
{
    if(!downloaded_stages.contains(name))
        downloaded_stages.add(name);
    
    try
    {
        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();

        Document config_doc = docBuilder.parse (new File("config.xml"));

        config_doc.getDocumentElement ().normalize ();

        NodeList config_stage = config_doc.getElementsByTagName("Stages");

        //Stage exists in main?
        NodeList stage_nodelist = config_doc.getElementsByTagName("stage");
        for(int i=0;i<stage_nodelist.getLength();i++)
        {
            if(((Element)stage_nodelist.item(i)).getAttribute("name").equals(name))
                return;
        }

        Element new_char = config_doc.createElement("stage");
        new_char.setAttribute("name", ""+name);
        config_stage.item(0).appendChild(new_char);

        //Save XML file
        OutputFormat format = new OutputFormat(config_doc);
        format.setIndenting(true);
        XMLSerializer serializer;
        serializer = new XMLSerializer(new FileOutputStream(new File("config.xml")), format);
        serializer.serialize(config_doc);

    }catch (SAXParseException err) {
        System.out.println ("** Parsing error" + ", line " 
             + err.getLineNumber () + ", uri " + err.getSystemId ());
        System.out.println(" " + err.getMessage ());

    }catch (SAXException e) {
        Exception x = e.getException ();
        ((x == null) ? e : x).printStackTrace ();
    }catch (Throwable t) {
        t.printStackTrace ();
    }
}

void downloadGame()
{
    createDir("lib");
    createDir("chars");
    createDir("menu");
    createDir("menu/audio");
    createDir("misc");
    createDir("misc/you loose");
    createDir("misc/you win");
    createDir("stages");
    
    this.pbar_download.setMaximum(calculateGameDownloadLenght());
    
    int new_version=-1;
    
    try {
        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
        
        //Mandatory files
        Document launcher_doc = docBuilder.parse (new File("launcher.xml"));

        launcher_doc.getDocumentElement ().normalize ();
        
        //Get new version
        Element version_element = (Element)launcher_doc.getElementsByTagName("Version").item(0);
        new_version=Integer.parseInt(version_element.getAttribute("version"));
        
        //Download files
        NodeList listOfFile_launcher_file = launcher_doc.getElementsByTagName("file");
            
        for(int s=0; s<listOfFile_launcher_file.getLength() ; s++)
        {
            this.getFile(((Element)listOfFile_launcher_file.item(s)).getAttribute("path"));
            this.pbar_download.setValue(this.pbar_download.getValue()+1);
        }
        
        //Operating System specific files
        launcher_doc.getDocumentElement ().normalize ();

        listOfFile_launcher_file = launcher_doc.getElementsByTagName(operating_system);
            
        for(int s=0; s<listOfFile_launcher_file.getLength() ; s++)
        {
            this.getFile(((Element)listOfFile_launcher_file.item(s)).getAttribute("path"));
            this.pbar_download.setValue(this.pbar_download.getValue()+1);
        }
    }catch (SAXParseException err) {
        System.out.println ("** Parsing error" + ", line " 
             + err.getLineNumber () + ", uri " + err.getSystemId ());
        System.out.println(" " + err.getMessage ());

    }catch (SAXException e) {
        Exception x = e.getException ();
        ((x == null) ? e : x).printStackTrace ();
    }catch (Throwable t) {
        t.printStackTrace ();
    }
    
    downloadChar("Iguro");
    downloadStage("FeministKillBot_normal");
    
    this.txt_info.setText("Finished downloading game. Restarting launcher.");
    
    writeVersionIntoConfig(new_version);
    addPreviousCharsAndStages();
    restartLauncher();
}

void addPreviousCharsAndStages()
{
    for(int i=0;i<downloaded_stages.size();i++)
    {
        addStage(downloaded_stages.get(i));
    }
    for(int i=0;i<downloaded_chars.size();i++)
    {
        addChar(downloaded_chars.get(i));
    }
}

int calculateGameDownloadLenght()       
{
    int res = 0;
    
    try {
        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();

        //Mandatory files
        Document launcher_doc = docBuilder.parse (new File("launcher.xml"));

        launcher_doc.getDocumentElement ().normalize ();

        NodeList listOfFile_launcher_file = launcher_doc.getElementsByTagName("file");

        res += listOfFile_launcher_file.getLength();

        listOfFile_launcher_file = launcher_doc.getElementsByTagName(operating_system);

        res += listOfFile_launcher_file.getLength();

        res += stage_download_steps+char_download_steps;
    }catch(Exception e)
    {
        
    }
    return res;
}

void restartLauncher()
{
    try
    {
        if(operating_system.compareTo("Linux64")==0)
        {
            Runtime.getRuntime().exec("java -jar STGLauncher_64.jar");
        }
        else if (operating_system.compareTo("Linux32")==0)
        {
            Runtime.getRuntime().exec("java -jar STGLauncher_32.jar");
        }
        else if(operating_system.compareTo("Windows")==0)
        {
            Runtime.getRuntime().exec("java -jar STGLauncher_windows.jar");
        }
        System.exit(0);
    }catch(Exception e)
    {
        e.printStackTrace();
    }
}

void writeVersionIntoConfig(int new_version)
{
    try {
        //Update config in memory
        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
        Document config_doc = docBuilder.parse (new File("config.xml"));
        config_doc.getDocumentElement ().normalize ();
        
        NodeList version_node_list = config_doc.getElementsByTagName("Version");
        Element version_element = (Element)version_node_list.item(0);
        
        if(version_element!=null)
        {
            version_element.setAttribute("version", new_version+"");
        }else
        {
            Element config_file_element = (Element)config_doc.getElementsByTagName("ConfigFile").item(0);
            Element new_version_element = config_doc.createElement("Version");
            new_version_element.setAttribute("version", new_version+"");
            config_file_element.appendChild(new_version_element);
        }
        
        //Save it to the file
        OutputFormat format = new OutputFormat(config_doc);
        format.setIndenting(true);
        XMLSerializer serializer;
        serializer = new XMLSerializer(new FileOutputStream(new File("config.xml")), format);
        serializer.serialize(config_doc);
    } catch (FileNotFoundException ex) {
        
    } catch (IOException ex) {
     
    }catch (SAXParseException err) {
        System.out.println ("** Parsing error" + ", line " 
             + err.getLineNumber () + ", uri " + err.getSystemId ());
        System.out.println(" " + err.getMessage ());

    }catch (SAXException e) {
        Exception x = e.getException ();
        ((x == null) ? e : x).printStackTrace ();
    }catch (Throwable t) {
        t.printStackTrace ();
    }
}

private void btn_patchMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_patchMousePressed
    new Thread()
    {
        public void run()
        {
            pbar_download.setValue(0);
            downloadGame();
        }
    }.start();
}//GEN-LAST:event_btn_patchMousePressed

private void list_stagesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_list_stagesMousePressed
    String selected_stage= (String)list_stages.getSelectedValue();
    
    btn_delete_stage.setEnabled(false);
    btn_update_stage.setEnabled(false);
    btn_download_stage.setEnabled(false);
    
    if(downloaded_stages.contains(selected_stage))
    {
//        btn_delete_stage.setEnabled(true);
        btn_update_stage.setEnabled(true);
        btn_download_stage.setEnabled(false);
        
        ((ImagePanel)ip_stage_preview).setImage("stage_previews/"+selected_stage+".png");
    }else if(selected_stage!=null && selected_stage!="")
    {
        btn_delete_stage.setEnabled(false);
        btn_update_stage.setEnabled(false);
        btn_download_stage.setEnabled(true);
        
        ((ImagePanel)ip_stage_preview).setImage("stage_previews/"+selected_stage+".png");
    }
}//GEN-LAST:event_list_stagesMousePressed

private void btn_download_stageMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_download_stageMousePressed
    this.pbar_download.setValue(0);
    this.pbar_download.setMaximum(stage_download_steps);
    new Thread()
    {
        public void run()
        {
            downloadStage((String)list_stages.getSelectedValue());
//            btn_delete_stage.setEnabled(true);
            btn_update_stage.setEnabled(true);
            btn_download_stage.setEnabled(false);
        }
    }.start();
}//GEN-LAST:event_btn_download_stageMousePressed

private void btn_update_stageMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_update_stageMousePressed
    this.pbar_download.setValue(0);
    this.pbar_download.setMaximum(stage_download_steps);
    new Thread()
    {
        public void run()
        {
            downloadStage((String)list_stages.getSelectedValue());
        }
    }.start();
}//GEN-LAST:event_btn_update_stageMousePressed

private void btn_delete_stageMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_delete_stageMousePressed
// TODO add your handling code here:
}//GEN-LAST:event_btn_delete_stageMousePressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_delete_stage;
    private javax.swing.JButton btn_download_stage;
    private javax.swing.JButton btn_patch;
    private javax.swing.JButton btn_start;
    private javax.swing.JButton btn_update_stage;
    private javax.swing.JPanel ip_stage_preview;
    private javax.swing.JPanel ip_top_banner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList list_stages;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPanel panel_stages;
    private javax.swing.JPanel panel_top;
    private javax.swing.JProgressBar pbar_download;
    private javax.swing.JLabel txt_info;
    private javax.swing.JLabel txt_notice;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;
}
